apply plugin: 'com.android.library'

def getConfigs() {
    def environment = hasProperty('env') ? env : 'dev'//测试环境
//    def environment = hasProperty('env') ? env : 'prod'//产品环境
    println "Environment is set to $environment"
    Properties props = new Properties()
    props.load(new FileInputStream(file("conf/$environment/conf.properties")))
    return props
}

def valueType(value) {
    if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
        return 'boolean'
    } else if (value ==~ /\d+/) {
        return "int"
    } else {
        return "String"
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        def props = getConfigs()
        props.propertyNames().each { name ->
            buildConfigField valueType(props.getProperty(name.toString())), name, props.getProperty(name.toString())
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:23+'
    testImplementation 'junit:junit:4.12'
    api group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
