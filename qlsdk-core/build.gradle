apply plugin: 'com.android.library'

def getConfigs() {
    def environment = hasProperty('env') ? env : 'dev'//测试环境
//    def environment = hasProperty('env') ? env : 'prod'//产品环境
    println "Environment is set to $environment"
    Properties props = new Properties()
    props.load(new FileInputStream(file("conf/$environment/conf.properties")))
    return props
}

def valueType(value) {
    if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
        return 'boolean'
    } else if (value ==~ /\d+/) {
        return "int"
    } else {
        return "String"
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        def props = getConfigs()
        props.propertyNames().each { name ->
            buildConfigField valueType(props.getProperty(name.toString())), name, props.getProperty(name.toString())
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    if (buildToolIsGreaterThan3 == true) {
        implementation fileTree(dir: 'libs', include: ['*.jar'])

        implementation 'com.android.support:appcompat-v7:23+'
        testImplementation 'junit:junit:4.12'
        api group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    } else {
        compile fileTree(dir: 'libs', include: ['*.jar'])

        compile 'com.android.support:appcompat-v7:23+' //Non embedded dependency
        testCompile 'junit:junit:4.12'
        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    }
}

def SDK_BASENAME = "qlsdk-core";
def SDK_VERSION = "_v1.0.1";
def sdkDestinationPath = "build";
def zipFile = file('build/intermediates/bundles/release/classes.jar')

task deleteBuild(type: Delete) {
    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + ".jar"
}

task makeJar(type: Jar) {
    if (!zipFile.exists()){
        zipFile = file('build/intermediates/bundles/debug/classes.jar')
    }
    from zipTree(zipFile)
    from fileTree(dir: 'src/main',includes: ['assets/**'])//将assets目录打入jar包
    baseName = SDK_BASENAME + SDK_VERSION
    destinationDir = file(sdkDestinationPath)
}

makeJar.dependsOn(deleteBuild, build)